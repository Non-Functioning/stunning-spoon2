Vague naming and method placing leads to issues and misunderstandings in programming, especially when a piece of code is shared with someone else. From this assignment, we realised that some of our methods were not placed in a clear sense. For example, we have getColor1() and getColor2() in our Animation class. They make perfect sense to us since we designed the class, and we use them to access the change in colours in every change colour animation object. However, our customer group was confused about their usage, because we placed these methods in the abstract class. Thus, placing the methods in the concrete classes where they solely belong to would have been a better approach. Just like the problem for placing the methods, we faced issues similar to this that were small but accumulative. In the end, from exchanging the code with other groups, it made us realise that we could have arranged things in a clearer way throughout the project.
Speaking of getting and using other groupâ€™s code to make the animator work, we had some issues along the way. I thought that every group would more or less have their classes and their usages set to something similar to our design, but in reality, we had to do quite some work in order to get their view to work with our model. Our provider had their SVG implementations embedded within the animation and shape classes, and we had to reach out for help since the view behaviours were not technically within the SVG view class itself. Generally speaking, another lesson we learnt from this assignment is that design decisions can play a huge role in the programming world. However, I believe that in the work field, there is a standard for people to follow to decrease the chances of such divergences.
